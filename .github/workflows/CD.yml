# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: CD
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'master'       # Run the workflow when pushing to the master branch
  pull_request:       # Run the workflow on pull requests

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  validate_nuget:
    runs-on: macos-latest
    needs: [ create_nuget ]
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet package
      # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them
      # using the --excluded-rules or --excluded-rule-ids option
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  run_test:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: Run tests
      run: dotnet test --configuration Release

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: macos-latest
    needs: [ validate_nuget, run_test ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Authenticate with GitHub Packages using the GITHUB_TOKEN secret
      - name: Authenticate with GitHub Packages
        run: dotnet nuget add source https://nuget.pkg.github.com/hootanht/index.json -n github -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text

      # Publish all NuGet packages to GitHub Packages
      - name: Publish NuGet package to GitHub Packages
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.GITHUB_TOKEN }}" --source https://nuget.pkg.github.com/hootanht/index.json --skip-duplicate
          }

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package to NuGet.org
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }

  create_github_release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: macos-latest
    needs: [ deploy ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      # Fetch all tags to make sure the latest tag is available
      - name: Fetch tags
        run: git fetch --tags

      # Get the version tag from the latest tag
      - name: Get version from tag
        id: get_version
        run: |
          $VERSION = git describe --tags --abbrev=0 --always
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV


      # Fetch changes from the previous version
      - name: Fetch changes from previous version
        id: fetch_changes
        run: |
          $PREV_TAG = git describe --tags --abbrev=0 HEAD^
          echo "PREV_TAG=$PREV_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          $CHANGES = git log $PREV_TAG..HEAD --pretty=format:"%h - %s"
          echo "CHANGES=$CHANGES" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Create the GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}   # Ensure the tag_name is passed
          release_name: Release ${{ env.VERSION }}
          body: |
            ## Changes in this Release
            ${{ env.CHANGES }}
          draft: false
          prerelease: false
